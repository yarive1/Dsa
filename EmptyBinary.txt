/*Beginning with an empty binary search tree, Construct a binary search tree by inserting the
values in the order given. After constructing a binary tree
i. Insert new node
ii. Find number of nodes in longest path
iii. Minimum data value found in the tree
iv. Change a tree so that the roles of the left and right pointers are swapped
at every node
v. Search a value
*/

#include <iostream>
using namespace std;
class Node{
    public:
    int key;
    Node *ln,*rn;
    Node(int key){
        this->key=key;
        ln=rn=nullptr;
    }
};

class Tree{
    public:
    Node *root;
    Tree(){
        root=nullptr;
    }
    Node *createTree(int key){
        root=new Node(key);
        return root;
    }
    void insertNode(int key,Node *root){
        if (key<root->key) 
        {
            if (root->ln==nullptr)
            {
                root->ln=new Node(key);
            }
            else
            {
                insertNode(key,root->ln);
            }
        }
        else if (key>root->key)
        {
            if (root->rn==nullptr)
            {
                root->rn=new Node(key);
            }else{
                insertNode(key,root->rn);
            }
            
        }else{
            cout<<"key is already present\n";
        }
        
    }
    void displayInorder(Node *root){
        if(root!=nullptr){
            displayInorder(root->ln);
            cout<<root->key<<endl;
            displayInorder(root->rn);
        }
    }

    void minimum(Node *root){
        if (root==nullptr)
        {
            return;
        }
        while (root->ln!=nullptr)
        {
            root=root->ln;
        }
        cout<<"Minimum element is : "<<root->key<<endl;
    }
    void search(int key,Node *root,int &flag1){
        if (root!=nullptr)
        {
            if (key==root->key)
            {
                flag1=1;
            }else if (key<root->key)
            {
                search(key,root->ln,flag1);
            }else
            {
                search(key,root->rn,flag1);
            }
        }
        
    }
    int longestPath(Node *root){
        if (root==nullptr)
        {
            return 0;
        }
        int lctr=longestPath(root->ln);
        int rctr=longestPath(root->rn);
        return max(lctr,rctr)+1;
        
    }
    Node* swapNodes(Node* root){
        if (root==nullptr)
        {
            return nullptr;
        }
        Node *temp;
        temp=root->ln;
        root->ln=root->rn;
        root->rn=temp;
        
        swapNodes(root->ln);
        swapNodes(root->rn);
        return root;
    }
};



int main(){
    Node *root=nullptr;
    int flag=0;
    cout<<"Hello\n";
    Tree t;
    if (root==nullptr)
    {
        root=t.createTree(5);
    }
    t.insertNode(2,root);
    t.insertNode(4,root);
    t.insertNode(6,root);
    t.displayInorder(root);
    /*t.search(4,root,flag);
    if (flag==1)
    {
        cout<<"Key found\n";
    }else{
        cout<<"Key not found\n";
    }
    flag=0;*/
    cout<<"Longest path is "<<t.longestPath(root)<<endl;
    t.swapNodes(root);
    t.displayInorder(root);

}